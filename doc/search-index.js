var searchIndex = {};
searchIndex["noir"] = {"doc":"**noir** is a request driven, black box testing library for HTTP based APIs.","items":[[3,"Options","noir","Additional configuration options for api requests and responses.",null,null],[12,"json_compare_depth","","Maximum depth for recursive json comparison. Defaults to `4096`.",0,null],[3,"HttpRequest","","A HTTP request for API testing.",null,null],[3,"MockResponseProvider","","An interface for `MockRequest` trait implementations allowing them to\nconsume matching `MockResponse` objects that were provided for the current\ntest.",null,null],[3,"HttpResponse","","A mocked HTTP response that is being provided to a testable API.",null,null],[3,"HttpHeader","","An abstraction over different `hyper::Header` implementations.",null,null],[3,"HttpBody","","An abstraction over different data types used for HTTP request bodies.",null,null],[3,"HttpQueryString","","An abstraction over a HTTP query string.",null,null],[3,"HttpFormData","","An abstraction over HTTP form data.",null,null],[11,"new","alloc::arc","Constructs a new `Arc&lt;T&gt;`.",1,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",1,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",1,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",1,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",1,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",1,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",1,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",2,null],[11,"pointer","","",3,null],[11,"make_place","","",3,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",3,null],[11,"finalize","","",4,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",2,null],[11,"drop","","",3,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",4,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",4,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",4,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",4,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"ge","","",4,null],[11,"gt","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"call_once","","",4,null],[11,"call_once","","",4,null],[11,"clone","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","alloc::arc","",5,null],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",1,null],[11,"deref","","",1,null],[11,"drop","","Drops the `Arc&lt;T&gt;`.",1,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",5,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",5,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",5,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",1,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",1,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",1,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",1,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",1,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",1,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"borrow","","",1,null],[11,"as_ref","","",1,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",6,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",6,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",6,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",6,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",6,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",6,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",6,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",6,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",6,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",6,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",6,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",6,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",6,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",6,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",7,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",7,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",7,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",7,null],[11,"fmt","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",6,null],[11,"as_ref","","",6,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",8,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",8,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",8,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",8,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",8,null],[11,"cap","","Gets the capacity of the allocation.",8,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",8,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",8,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",8,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",8,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",8,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",8,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",8,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",8,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",8,null],[11,"with_headers","noir","Sets additional headers to be send with the request.",9,null],[11,"with_header","","Sets one additional header to be send with the request.",9,null],[11,"with_query","","Sets the request&#39;s query string.",9,null],[11,"with_body","","Sets the request body.",9,null],[11,"with_options","","Sets the request&#39;s configuration options.",9,null],[11,"expected_status","","Sets the expected response status for the request.",9,null],[11,"expected_header","","Sets one additional header that should be present on the response.",9,null],[11,"unexpected_header","","Sets one additional header that should be absent from the response.",9,null],[11,"expected_headers","","Sets additional headers that should be present on the response.",9,null],[11,"expected_body","","Sets the expected response body for the request.",9,null],[11,"expected_exact_body","","Sets the expected response body for the request (exact version).",9,null],[11,"provide","","Provides additional mocked responses from endpoints for the time of the\ncurrently executing request.",9,null],[11,"dump","","Dumps the response headers and body this request.",9,null],[11,"mocks","","Provides additional mocks which will be active for the time of the\ncurrently executing request.",9,null],[11,"collect","","Directly execute the test request and collect any error message output.",9,null],[11,"drop","","",9,null],[11,"default","","",0,{"inputs":[],"output":{"name":"options"}}],[11,"response_from_request","","Returns the first, not yet consumed `MockResponse` that matches the\nprovided `request`.",10,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","","Creates a HTTP body from a byte vector.",11,{"inputs":[{"name":"vec"}],"output":{"name":"httpbody"}}],[11,"from","","Creates a HTTP body from a string slice.",11,{"inputs":[{"name":"str"}],"output":{"name":"httpbody"}}],[11,"from","","Creates a HTTP body from a `String`.",11,{"inputs":[{"name":"string"}],"output":{"name":"httpbody"}}],[11,"from","","Creates a HTTP body from a JSON value.",11,{"inputs":[{"name":"jsonvalue"}],"output":{"name":"httpbody"}}],[11,"from","","Creates a HTTP body from form data.",11,{"inputs":[{"name":"httpformdata"}],"output":{"name":"httpbody"}}],[11,"from","","Converts a implementation of the `hyper::Header` trait into a abstract\nrepresentation suitable for use within a `Vec`.",12,{"inputs":[{"name":"h"}],"output":{"name":"httpheader"}}],[11,"with_status","","Sets the response status.",13,null],[11,"with_headers","","Sets additional headers to be send with the response.",13,null],[11,"with_header","","Sets one additional header to be send with the response.",13,null],[11,"with_query","","Sets the query string of the response&#39;s path.",13,null],[11,"with_body","","Sets the response body.",13,null],[11,"with_error","","Sets a low level io error to be returned once the response is read.",13,null],[11,"with_options","","Sets the response&#39;s configuration options.",13,null],[11,"expected_header","","Sets one additional header that should be present on the request to the\nresponse.",13,null],[11,"unexpected_header","","Sets one additional header that should be absent from the request made\nto the response.",13,null],[11,"expected_headers","","Sets additional headers that should be present on the request to the\nresponse.",13,null],[11,"expected_body","","Sets the expected request body for the response.",13,null],[11,"expected_exact_body","","Sets the expected request body for the response, exact version.",13,null],[11,"dump","","Dumps the response headers and body for this response.",13,null],[11,"matches","","",13,null],[11,"respond","","",13,null],[11,"validate","","",13,null],[11,"validate_header","","",13,null],[6,"MockRequestResponse","","A response to a request made against a mocked endpoint.",null,null],[8,"HttpApi","","A trait for the description of a testable, HTTP based api.",null,null],[10,"start","","A blocking callback for provision of the api.",14,null],[10,"hostname","","Returns the hostname of the api.",14,null],[10,"port","","Returns the port of the api.",14,null],[11,"host","","Returns the `hostname:port` combination of the api used for making\nrequests against the api.",14,null],[11,"protocol","","Returns the http protocol used by the api.",14,null],[11,"url","","Returns the fully qualified base url of the api.",14,null],[11,"url_with_path","","Returns the fully qualified url of the api with the specified `path`\nappended.",14,null],[11,"options","","Returns a `OPTIONS` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"get","","Returns a `GET` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"post","","Returns a `POST` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"put","","Returns a `PUT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"delete","","Returns a `DELETE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"head","","Returns a `HEAD` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"trace","","Returns a `TRACE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"connect","","Returns a `CONNECT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"patch","","Returns a `PATCH` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"ext","","Returns a request for the specified http verb extension that will be\nperformed against the api.",14,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"httprequest"}}],[8,"MockResponse","","A trait for implementation of a response provided to a concrete type of\n`MockRequest`.",null,null],[10,"matches","","Compare the response against any type implementing `MockRequest` and\nreturn `true` if they belong together.",15,null],[10,"respond","","Called when the implementation of `MockResponse::matches` return `true`.",15,null],[10,"validate","","If the response has a matching `MockRequest`, compare the two and return\na vector of error messages listing any differences.",15,null],[10,"validate_header","","Return a header for use with the formatted error values returned by\n`MockResponse::validate()`.",15,null],[8,"MockRequest","","A trait for implementation of a request matched against concrete types of\n`MockResponse`.",null,null],[10,"validate","","If the request has no matching `MockResponse` return a error message.",16,null],[11,"downcast_ref","","A helper for downcasting a `MockRequest` trait object into one of its\nconcrete types.",16,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"downcast_mut","","Mutable version of `MockRequest::downcast_ref`.",16,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[10,"as_any","","Method for casting the concrete implementation of `MockRequest` into a\n`&amp;Any` for use with `MockRequest::downcast_ref()`.",16,null],[10,"as_any_mut","","Method for casting the concrete implementation of `MockRequest` into a\n`&amp;mut Any` for use with `MockRequest::downcast_mut()`.",16,null],[8,"MockProvider","","A trait for implementation of a custom mock provider.",null,null],[10,"setup","","Called before each individual `HttpRequest` in a test is send.",17,null],[10,"teardown","","Called after each individual `HttpRequest` in a test has completed.",17,null],[8,"HttpEndpoint","","A trait for the description of a HTTP based endpoint used to provided\nmocked responses to a testable API.",null,null],[10,"hostname","","Returns the hostname of the endpoint.",18,null],[10,"port","","Returns the port of the api.",18,null],[11,"host","","Returns the `hostname:port` combination of the endpoint.",18,null],[11,"protocol","","Returns the http protocol used by the endpoint.",18,null],[11,"url","","Returns the fully qualified base url of the endpoint.",18,null],[11,"url_with_path","","Returns the fully qualified url of the endpoint with the specified `path`\nappended.",18,null],[11,"options","","Return a response to the next `OPTIONS` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"get","","Return a response to the next `GET` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"post","","Return a response to the next `POST` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"put","","Return a response to the next `PUT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"delete","","Return a response to the next `DELETE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"head","","Return a response to the next `HEAD` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"trace","","Return a response to the next `TRACE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"connect","","Return a response to the next `CONNECT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"patch","","Return a response to the next `PATCH` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"ext","","Return a response to the next request made against the endpoint\nwhich matches the specified path and http verb extension.",18,null],[14,"hyper_client!","","A macro for intercepting `hyper::Client::new()` calls made during tests.",null,null],[14,"responses!","","A convenience macro for creating a vector of `Box&lt;MockResponse&gt;` items.",null,null],[14,"mocks!","","A convenience macro for creating a vector of `Box&lt;MockProvider&gt;` items.",null,null],[14,"headers!","","A convenience macro for creating a vector of `HttpHeader` items.",null,null],[14,"query!","","A macro for creating a `HttpQueryString` instance.",null,null],[14,"form!","","A macro for creating a `HttpFormData ` instance.",null,null],[11,"host","","Returns the `hostname:port` combination of the api used for making\nrequests against the api.",14,null],[11,"protocol","","Returns the http protocol used by the api.",14,null],[11,"url","","Returns the fully qualified base url of the api.",14,null],[11,"url_with_path","","Returns the fully qualified url of the api with the specified `path`\nappended.",14,null],[11,"options","","Returns a `OPTIONS` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"get","","Returns a `GET` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"post","","Returns a `POST` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"put","","Returns a `PUT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"delete","","Returns a `DELETE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"head","","Returns a `HEAD` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"trace","","Returns a `TRACE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"connect","","Returns a `CONNECT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"patch","","Returns a `PATCH` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"ext","","Returns a request for the specified http verb extension that will be\nperformed against the api.",14,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"httprequest"}}],[11,"host","","Returns the `hostname:port` combination of the api used for making\nrequests against the api.",14,null],[11,"protocol","","Returns the http protocol used by the api.",14,null],[11,"url","","Returns the fully qualified base url of the api.",14,null],[11,"url_with_path","","Returns the fully qualified url of the api with the specified `path`\nappended.",14,null],[11,"options","","Returns a `OPTIONS` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"get","","Returns a `GET` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"post","","Returns a `POST` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"put","","Returns a `PUT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"delete","","Returns a `DELETE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"head","","Returns a `HEAD` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"trace","","Returns a `TRACE` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"connect","","Returns a `CONNECT` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"patch","","Returns a `PATCH` request that will be performed against the api.",14,{"inputs":[{"name":"str"}],"output":{"name":"httprequest"}}],[11,"ext","","Returns a request for the specified http verb extension that will be\nperformed against the api.",14,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"httprequest"}}],[11,"downcast_ref","","A helper for downcasting a `MockRequest` trait object into one of its\nconcrete types.",16,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"downcast_mut","","Mutable version of `MockRequest::downcast_ref`.",16,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"host","","Returns the `hostname:port` combination of the endpoint.",18,null],[11,"protocol","","Returns the http protocol used by the endpoint.",18,null],[11,"url","","Returns the fully qualified base url of the endpoint.",18,null],[11,"url_with_path","","Returns the fully qualified url of the endpoint with the specified `path`\nappended.",18,null],[11,"options","","Return a response to the next `OPTIONS` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"get","","Return a response to the next `GET` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"post","","Return a response to the next `POST` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"put","","Return a response to the next `PUT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"delete","","Return a response to the next `DELETE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"head","","Return a response to the next `HEAD` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"trace","","Return a response to the next `TRACE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"connect","","Return a response to the next `CONNECT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"patch","","Return a response to the next `PATCH` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"ext","","Return a response to the next request made against the endpoint\nwhich matches the specified path and http verb extension.",18,null],[11,"host","","Returns the `hostname:port` combination of the endpoint.",18,null],[11,"protocol","","Returns the http protocol used by the endpoint.",18,null],[11,"url","","Returns the fully qualified base url of the endpoint.",18,null],[11,"url_with_path","","Returns the fully qualified url of the endpoint with the specified `path`\nappended.",18,null],[11,"options","","Return a response to the next `OPTIONS` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"get","","Return a response to the next `GET` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"post","","Return a response to the next `POST` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"put","","Return a response to the next `PUT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"delete","","Return a response to the next `DELETE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"head","","Return a response to the next `HEAD` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"trace","","Return a response to the next `TRACE` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"connect","","Return a response to the next `CONNECT` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"patch","","Return a response to the next `PATCH` request made against the endpoint\nwhich matches the specified path.",18,null],[11,"ext","","Return a response to the next request made against the endpoint\nwhich matches the specified path and http verb extension.",18,null]],"paths":[[3,"Options"],[3,"Arc"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[3,"HttpRequest"],[3,"MockResponseProvider"],[3,"HttpBody"],[3,"HttpHeader"],[3,"HttpResponse"],[8,"HttpApi"],[8,"MockResponse"],[8,"MockRequest"],[8,"MockProvider"],[8,"HttpEndpoint"]]};
initSearch(searchIndex);
